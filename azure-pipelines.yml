trigger:
- main

variables:
  DOCKER_IMAGE: "sharmila79/django-app"
  DOCKER_CREDENTIALS_ID: "docker-id"
  KUBECONFIG_CREDENTIALS_ID: "kubernetes-id"
  SONARQUBE_SERVICE_CONNECTION: "sonar-id"

pool:
  name: Default
  demands:
  - agent.name -equals sqtask

stages:
- stage: CloneCode
  jobs:
  - job: CheckoutRepo
    steps:
    - checkout: self
      displayName: 'Clone Repository'
      persistCredentials: true
      clean: true
      fetchDepth: 0
    - script: echo "Repository cloned successfully!"
      displayName: 'Confirm Repository Clone'

- stage: RunScript
  jobs:
  - job: RunOneLineScript
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

# - stage: SonarQubeAnalysis
#   jobs:
#   - job: RunSonarQube
#     steps:
#     - task: SonarQubePrepare@5
#       inputs:
#         SonarQube: $(SONARQUBE_SERVICE_CONNECTION)
#         scannerMode: 'CLI'
#         configMode: 'manual'
#         cliProjectKey: 'myproject'
#         cliProjectName: 'MyProject'
#         cliSources: '.'
#       displayName: 'Prepare SonarQube Analysis'
#     - script: |
#         echo "Running SonarQube analysis..."
#         sonar-scanner
#       displayName: 'Run SonarQube Scanner'
#     - task: SonarQubePublish@5
#       inputs:
#         pollingTimeoutSec: '300'
#       displayName: 'Publish SonarQube Results'

- stage: SonarQubeAnalysis
  jobs:
  - job: RunSonarQube
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: sonar-id
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'myproject'
        cliProjectName: 'My Project'
        cliSources: '.'
      displayName: 'Prepare SonarQube Analysis'
    - script: |
        echo "Installing SonarQube scanner..."
        wget -qO- https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip | bsdtar -xvf- -C /opt
        export PATH=$PATH:/opt/sonar-scanner-4.6.2.2472-linux/bin
      displayName: 'Install SonarQube Scanner'
    - script: |
        echo "Running SonarQube analysis..."
        sonar-scanner
      displayName: 'Run SonarQube Scanner'
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarQube Results'
- stage: BuildAndDeploy
  jobs:
  - job: BuildDjangoApp
    steps:
    - script: |
        echo "Building Django application..."
        docker build -t $(DOCKER_IMAGE) .
      displayName: 'Build Docker Image'
    - script: |
        echo "Pushing Docker image to registry..."
        echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_CREDENTIALS_ID) --password-stdin
        docker push $(DOCKER_IMAGE)
      displayName: 'Push Docker Image to Registry'
    - script: |
        echo "Deleting existing deployment..."
        kubectl delete -f https://raw.githubusercontent.com/SharmilaBalanand/myproject/master/deploymentservice.yaml || true
      displayName: 'Delete Existing Deployment'
    - script: |
        echo "Deploying to AKS..."
        kubectl apply -f https://raw.githubusercontent.com/SharmilaBalanand/myproject/master/deploymentservice.yaml
      displayName: 'Deploy to AKS'

